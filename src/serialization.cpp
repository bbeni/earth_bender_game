// Copyright (C) 2024 Benjamin Froelich
// This file is part of https://github.com/bbeni/earth_bender_game
// For conditions of distribution and use, see copyright notice in project root.

/* TODO: replace this with actual serialization for develpment phase.
This is just here to have a quick and dirty way of saving rooms.
Having to compile everytime we load the new rooms is not so friendly.
*/

#include "serialization.hpp"
#include "data_stuff.h"

void append_string(Code_Builder* cb, const char* string) {
	size_t index = 0;
	while (string[index] != 0) {
		array_add(cb, string[index]);
		index++;
	};
}

// TODO: ckeck this never exceeds
#define MAX_LENGTH_FRAGMENT 256
void append_stringf(Code_Builder* cb, const char* format, ...) {
	
	char buffer[MAX_LENGTH_FRAGMENT];
	
	va_list args;
	va_start (args, format);
	int ok = vsprintf_s(buffer, format, args);
	append_string(cb, buffer);
	assert(ok >= 0);
	va_end(args);
}


Code_Builder cb_new_rooms = { 0 };

void serialize_new_room_call(uint32_t depth, uint32_t width, uint32_t height) {
	append_stringf(&cb_new_rooms, "	r = room_alloc(%u, %u, %u);\n	array_add(rooms, r);\n", depth, width, height);
}

Code_Builder cb_tile_mods = { 0 };

void serialize_set_tile_call(uint32_t room_id, uint32_t i, uint32_t j, uint32_t elevation, Tile_Type type, Ramp_Orientation ramp) {
	append_stringf(&cb_tile_mods, "	set_tile(&rooms->data[%u], %u, %u, %u, (Tile_Type)%u, (Ramp_Orientation)%u);\n", room_id, i, j, elevation, type, ramp);
}

void serialize_remove_tile_call(uint32_t room_id, uint32_t i, uint32_t j, uint32_t elevation) {
	append_stringf(&cb_tile_mods, "	remove_tile(&rooms->data[%u], %u, %u, %u);\n", room_id, i, j, elevation);
}


void build_and_save_rooms_c_file(Room_Set* rooms, const char* filename) {
	
	Code_Builder code = { 0 };
	array_add(&cb_new_rooms, 0);
	array_add(&cb_tile_mods, 0);


	append_string(&code, "// This is autogenerated!!!!!!!!!!!\n");
	append_string(&code, "// Holds the serialized calls to construct the rooms.\n");
	append_string(&code, "\n");
	append_string(&code, "#ifndef _SERIALIZED_ROOOMS_LOL_H_\n");
	append_string(&code, "#define _SERIALIZED_ROOOMS_LOL_H_\n");
	append_string(&code, "\n");
	append_string(&code, "#include \"game.hpp\"\n");
	append_string(&code, "\n");
	append_string(&code, "void deserialize_rooms(Room_Set* rooms) {\n");
	append_string(&code, "	\n");
	append_string(&code, "	Room r;\n");
	append_string(&code, cb_new_rooms.data);
	append_string(&code, "	\n");
	append_string(&code, cb_tile_mods.data);
	append_string(&code, "	\n");
	append_string(&code, "	\n");
	append_string(&code, "} \n");
	append_string(&code, "	\n");
	append_string(&code, "#endif //_SERIALIZED_ROOOMS_LOL_H_\n");



	FILE *file;
	errno_t err = fopen_s(&file, filename, "w");

	if (err != 0) {
		printf("Error: cannot open file `%s`.\n", filename);
		exit(1);
	}

	fwrite(code.data, code.count, 1, file);

	array_free(&code);
	array_free(&cb_new_rooms);
	array_free(&cb_tile_mods);

}


